<?xml version="1.0" encoding="UTF-8"?>
<!-- <beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:aop="http://www.springframework.org/schema/aop" 
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd 
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd 
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"> -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        ">

	<context:property-placeholder
		location="classpath:jdbc.properties,classpath:order-server.properties"
		ignore-unresolvable="true" ignore-resource-not-found="true" />

	<context:component-scan base-package="com.gl.order.client.batch" />

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${jdbc.driver.class}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.pswd}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<property name="validationQuery">
			<value>${jdbc.validation.query}</value>
		</property>
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>

	<bean id="httpServerConfiguration" class="com.gl.order.client.config.HttpServerConfiguration">
		<property name="remoteHost" value="${http.remote.server.host}"/>
		<property name="schema" value="${http.remote.server.schema}"/>
		<property name="remotePort" value="${http.remote.server.port}"/>
	</bean>
	
	<bean id="httpRemoteServer" class="com.gl.order.client.sender.HttpRemoteServer">
		<property name="httpServerConfiguration" ref="httpServerConfiguration"/>
	</bean>

	<bean id="simpleOrderSender" class="com.gl.order.client.sender.SimpleOrderSender">
		<property name="httpRemoteServer" ref="httpRemoteServer" />
	</bean>

	<bean id="simpleBean" class="com.gl.order.client.batch.bean.SimpleBean">
		<property name="name" value="simpleBean" />
	</bean>

	<bean name="simpleOrderHeartBeatTask"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.gl.order.client.batch.simpleorder.job.SimpleOrderHeartBeatJob"/>
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
	</bean>

	<bean id="simpleOrderJobExTask"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="com.gl.order.client.batch.simpleorder.job.SimpleOrderJobEx" />
		<property name="durability" value="true"/>
		<property name="requestsRecovery" value="true"/>
	</bean>

	<bean id="simpleOrderHeartBeatTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">
		<!-- see the example of method invoking job above -->
		<property name="jobDetail" ref="simpleOrderHeartBeatTask" />
		<!-- 10 seconds -->
		<property name="startDelay" value="10000" />
		<!-- repeat every 30 seconds -->
		<property name="repeatInterval" value="30000" />
	</bean>

	<bean id="simpleOrderCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="name" value="simpleOrderCronTrigger" />
		<property name="group" value="simpleOrder" />
		<property name="jobDetail" ref="simpleOrderJobExTask" />
		<property name="cronExpression" value="0 0/10 * * * ?" />
	</bean>

	<bean id="simpleOrderScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean" destroy-method="destroy">
		<property name="schedulerName" value="simpleOrderScheduler" />
		<property name="dataSource" ref="dataSource"/>
		<property name="triggers">
			<list>
				<ref bean="simpleOrderCronTrigger" />
				<ref bean="simpleOrderHeartBeatTrigger" />
			</list>
		</property>
		<property name="applicationContextSchedulerContextKey" value="K_APPLICATION_CONTEXT"/>
	</bean>

</beans>